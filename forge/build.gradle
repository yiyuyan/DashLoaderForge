plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "dashloader.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

repositories {
    maven{
        url = 'https://cursemaven.com'
    }
    mavenCentral()
    mavenLocal()
    maven {
        name "Sonatype Snapshots"
        url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url "https://notalpha.dev/maven/releases"
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    modImplementation "curse.maven:forgified-fabric-api-889079:5990306"
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    implementation "dev.quantumfusion:Hyphen:0.4.0-rc.3"
    include "dev.quantumfusion:Hyphen:0.4.0-rc.3"

    implementation "dev.notalpha:Taski:2.1.0"
    include "dev.notalpha:Taski:2.1.0"

    implementation 'com.github.luben:zstd-jni:1.5.2-2'
    include 'com.github.luben:zstd-jni:1.5.2-2'

    implementation 'com.github.luben:zstd-jni:1.5.2-2'

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.2.0"))

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    //shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

loom {
    accessWidenerPath = file("src/main/resources/dashloader.accesswidener")
}
